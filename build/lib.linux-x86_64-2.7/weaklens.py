# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_weaklens')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_weaklens')
    _weaklens = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_weaklens', [dirname(__file__)])
        except ImportError:
            import _weaklens
            return _weaklens
        try:
            _mod = imp.load_module('_weaklens', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _weaklens = swig_import_helper()
    del swig_import_helper
else:
    import _weaklens
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class dp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _weaklens.new_dp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _weaklens.delete_dp
    __del__ = lambda self: None

    def assign(self, value):
        return _weaklens.dp_assign(self, value)

    def value(self):
        return _weaklens.dp_value(self)

    def cast(self):
        return _weaklens.dp_cast(self)
    if _newclass:
        frompointer = staticmethod(_weaklens.dp_frompointer)
    else:
        frompointer = _weaklens.dp_frompointer
dp_swigregister = _weaklens.dp_swigregister
dp_swigregister(dp)

def dp_frompointer(t):
    return _weaklens.dp_frompointer(t)
dp_frompointer = _weaklens.dp_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _weaklens.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _weaklens.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _weaklens.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _weaklens.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _weaklens.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_weaklens.doubleArray_frompointer)
    else:
        frompointer = _weaklens.doubleArray_frompointer
doubleArray_swigregister = _weaklens.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _weaklens.doubleArray_frompointer(t)
doubleArray_frompointer = _weaklens.doubleArray_frompointer

class weaklens(_object):
    """Proxy of C++ weaklens class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, weaklens, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, weaklens, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tree"] = _weaklens.weaklens_tree_set
    __swig_getmethods__["tree"] = _weaklens.weaklens_tree_get
    if _newclass:
        tree = _swig_property(_weaklens.weaklens_tree_get, _weaklens.weaklens_tree_set)

    def __init__(self, *args):
        """
        __init__(weaklens self) -> weaklens
        __init__(weaklens self, double xrmin, double xrmax, int xrbins, char * xoutfile, bool xverbose, double Omegam=0.279, char * output_lens_source_pairs, double xR2min=0.3, double xR2max=1.0, int xR2bins=100) -> weaklens
        __init__(weaklens self, double xrmin, double xrmax, int xrbins, char * xoutfile, bool xverbose, double Omegam=0.279, char * output_lens_source_pairs, double xR2min=0.3, double xR2max=1.0) -> weaklens
        __init__(weaklens self, double xrmin, double xrmax, int xrbins, char * xoutfile, bool xverbose, double Omegam=0.279, char * output_lens_source_pairs, double xR2min=0.3) -> weaklens
        __init__(weaklens self, double xrmin, double xrmax, int xrbins, char * xoutfile, bool xverbose, double Omegam=0.279, char * output_lens_source_pairs) -> weaklens
        __init__(weaklens self, double xrmin, double xrmax, int xrbins, char * xoutfile, bool xverbose, double Omegam=0.279) -> weaklens
        __init__(weaklens self, double xrmin, double xrmax, int xrbins, char * xoutfile, bool xverbose) -> weaklens

        Initializes weaklens object 

        :Parameters:

        -   xrmin : The minimum of the radial bins
        -   xrmax : The maximum of the radial bins
        -   xrbins : The total number of the radial bins
        -   xoutfile : The output file
        -   xverbose : Boolean parameter for verbosity
        -   xOmegam : Matter density parameter
        -   output_lens_source_pairs : File to output lens source pair information to

        :Returns:

        -   Weaklens object

            Without any inputs, initializes to the default rmin=0.5, rmax=15.0, rbins=15, verbose=True, outfile=Debug.dat, Omegam=0.279, output_lens_source_pairs=

        :Examples:

        >>> import weaklens as wl
        >>> a = wl.weaklens(0.5, 15.0, 15, 'Debug.dat', true, 0.279, 'allpairs.dat')
        >>> help(a)


        """
        this = _weaklens.new_weaklens(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _weaklens.delete_weaklens
    __del__ = lambda self: None

    def allocate_lens_memory(self, xNcen):
        """
        allocate_lens_memory(weaklens self, int xNcen) -> int

        Allocates memory for lens sample

        :Parameters:

        -   Nlens : Size of the lens sample (int)

        :Examples:

        >>> import weaklens as wl
        >>> a = wl.weaklens(0.5, 15.0, 15, 'Debug.dat', true, 0.279)
        >>> a.allocate_lens_memory(1000)
        >>> help(a)


        """
        return _weaklens.weaklens_allocate_lens_memory(self, xNcen)


    def process_lens(self, xra, xdec, xzred, xwt):
        """
        process_lens(weaklens self, double xra, double xdec, double xzred, double xwt) -> int

        Add a lens to the sample

        :Parameters:

        -   xra : Ra of the lens (float, in degrees)
        -   xdec : Dec of the lens (float, in degrees)
        -   xz : Redshift of the lens (float)
        -   xwt : Weight of the lens (float)

        :Examples:

        >>> import weaklens as wl
        >>> a = wl.weaklens(0.5, 15.0, 15, 'Debug.dat', true, 0.279)
        >>> a.allocate_lens_memory(1000)
        >>> a.process_lens(100., 2.0, 0.1, 1.0)
        >>> help(a)


        """
        return _weaklens.weaklens_process_lens(self, xra, xdec, xzred, xwt)


    def finalize_lenses(self):
        """
        finalize_lenses(weaklens self) -> int

        Finalize the lens sample, truncates the array if all allocated memory is not
        filled and generates a KDTree from the lens points internally for finding
        neighbours.

        :Parameters:

        -   None : 

        :Examples:

        >>> import weaklens as wl
        >>> a = wl.weaklens(0.5, 15.0, 15, 'Debug.dat', true, 0.279)
        >>> a.allocate_lens_memory(1000)
        >>> for i in range(Ngal):
                a.process_lens(100., 2.0, 0.1, 1.0)
        >>> a.finalize_lenses()
        >>> help(a)


        """
        return _weaklens.weaklens_finalize_lenses(self)


    def process_source(self, *args):
        """
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double sc1_nb, double sc2_nb, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0, double integral_cut_zdiff=0.0, double integral_cut_Pth=0.0, double integral_cut_zmax=99.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double sc1_nb, double sc2_nb, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0, double integral_cut_zdiff=0.0, double integral_cut_Pth=0.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double sc1_nb, double sc2_nb, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0, double integral_cut_zdiff=0.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double sc1_nb, double sc2_nb, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double sc1_nb, double sc2_nb, double szbest, double sR2, bool usepdf=False) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double sc1_nb, double sc2_nb, double szbest, double sR2) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0, double integral_cut_zdiff=0.0, double integral_cut_Pth=0.0, double integral_cut_zmax=99.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0, double integral_cut_zdiff=0.0, double integral_cut_Pth=0.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0, double integral_cut_zdiff=0.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double szbest, double sR2, bool usepdf=False, double integral_cut_zl=-99.0) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double szbest, double sR2, bool usepdf=False) -> int
        process_source(weaklens self, double sra, double sdec, double se1, double se2, double swt, double srms_e, double smcat, double sc1_dp, double sc2_dp, double szbest, double sR2) -> int

        Calculate the weak lensing signal for a source

        :Parameters:

        -   sra : Source ra (in degrees)
        -   sdec : Source declination (in degrees)
        -   se1 : Source e1
        -   se2 : Source e2
        -   swt : Source weight
        -   srms_e : Source rms ellipticity
        -   smcat : Source multiplicative bias
        -   sc1_dp : Source additive bias (c1_dp)
        -   sc2_dp : Source additive bias (c2_dp)
        -   sc1_nb : Source additive bias (c1_nb)
        -   sc2_nb : Source additive bias (c2_nb)
        -   szbest : Source best estimate of photoz or the photoz pdf
        -   usepdf : Source use pdf or not (false by default)

        :Examples:

        >>> import weaklens as wl
        >>> a = wl.weaklens(0.5, 15.0, 15, 'Debug.dat', true, 0.279)
        >>> a.allocate_lens_memory(1000)
        >>> for i in range(Ngal):
                a.process_lens(100., 2.0, 0.1, 1.0)
        >>> a.finalize_lenses()
        >>> a.process_source(100.1, 2.1, 0.21, 0.22, 0.5, 0.365, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, false)
        >>> help(a)


        """
        return _weaklens.weaklens_process_source(self, *args)


    def setup_pofz(self, pofz_zmin, pofz_zdiff, xNpz):
        """
        setup_pofz(weaklens self, double pofz_zmin, double pofz_zdiff, int xNpz) -> int

        Set up the redshift array for pofz using zmin, zdiff and Nz

        :Parameters:

        -   zmin : zmin for P(z) array
        -   zdiff : Delta z for P(z) array
        -   Nz : Number of zbins for P(z) array

        :Examples:



        """
        return _weaklens.weaklens_setup_pofz(self, pofz_zmin, pofz_zdiff, xNpz)


    def setup_pofz_array(self, pofz_zz):
        """
        setup_pofz_array(weaklens self, double * pofz_zz) -> int

        Set up the redshift array for pofz

        :Parameters:

        -   zz : Numpy array with redshifts

        :Examples:


        """
        return _weaklens.weaklens_setup_pofz_array(self, pofz_zz)


    def process_pofz(self, pofz):
        """
        process_pofz(weaklens self, double * pofz) -> int

        Process pofz distribution for a given source, sets up a spline for sigmacritinverse(zl)

        :Parameters:

        -   pofz : Numpy array with P(z)

        :Examples:



        """
        return _weaklens.weaklens_process_pofz(self, pofz)


    def add_pofz(self, pofz):
        """
        add_pofz(weaklens self, double * pofz) -> int

        Add pofz to the pofz distribution

        :Parameters:

        -   pofz : Numpy array with P(z)

        :Examples:



        """
        return _weaklens.weaklens_add_pofz(self, pofz)


    def integrate_pofz(self, zmin, zmax):
        """integrate_pofz(weaklens self, double zmin, double zmax) -> double"""
        return _weaklens.weaklens_integrate_pofz(self, zmin, zmax)


    def set_zlmax(self, integral_cut_zdiff, integral_cut_zmax, integral_cut_Pth):
        """set_zlmax(weaklens self, double integral_cut_zdiff, double integral_cut_zmax, double integral_cut_Pth) -> double"""
        return _weaklens.weaklens_set_zlmax(self, integral_cut_zdiff, integral_cut_zmax, integral_cut_Pth)


    def sigmacritinverse(self, zlens):
        """sigmacritinverse(weaklens self, double zlens) -> double"""
        return _weaklens.weaklens_sigmacritinverse(self, zlens)


    def finalize_results(self, writeok=False):
        """
        finalize_results(weaklens self, bool writeok=False) -> int
        finalize_results(weaklens self) -> int

        Compile weak lensing signal and dump into output file

        :Parameters:

        -   None :

        :Examples:

        >>> import weaklens as wl
        >>> a = wl.weaklens(0.5, 15.0, 15, 'Debug.dat', true, 0.279)
        >>> a.allocate_lens_memory(1000)
        >>> for i in range(Ngal):
                a.process_lens(100., 2.0, 0.1, 1.0)
        >>> a.finalize_lenses()
        >>> a.process_source(100.1, 2.1, 0.21, 0.22, 0.5, 0.365, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, false)
        >>> a.finalize_results()
        >>> help(a)


        """
        return _weaklens.weaklens_finalize_results(self, writeok)


    def finalize_pofz(self):
        """
        finalize_pofz(weaklens self) -> int

        Output pofz to outfile

        :Parameters:

        -   None :

        :Examples:



        """
        return _weaklens.weaklens_finalize_pofz(self)


    def test_searchrecord(self):
        """test_searchrecord(weaklens self) -> int"""
        return _weaklens.weaklens_test_searchrecord(self)


    def setup_random_rotate(self, Nseed):
        """setup_random_rotate(weaklens self, int Nseed) -> int"""
        return _weaklens.weaklens_setup_random_rotate(self, Nseed)

weaklens_swigregister = _weaklens.weaklens_swigregister
weaklens_swigregister(weaklens)

# This file is compatible with both classic and new-style classes.


